// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/auth/login": {
            "post": {
                "description": "UserLogin API is made for login the user in task manager application.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email of the user",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password of the user",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User login done successfully.",
                        "schema": {
                            "$ref": "#/definitions/response.UserWithTokens"
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "401": {
                        "description": "Password not matched.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "404": {
                        "description": "User not found.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/registration": {
            "post": {
                "description": "UserRegistration API is made for registering a new user in the task manager application.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "First name of the user",
                        "name": "firstName",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Last name of the user",
                        "name": "lastName",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bio of the user",
                        "name": "bio",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Email of the user",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password of the user",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "privacy of the user (PUBLIC, PRIVATE)",
                        "name": "privacy",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully.",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "409": {
                        "description": "Duplicate email found.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/reset-token": {
            "post": {
                "description": "ResetToken API is made for reset the user's access token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset Access Token",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003crefresh_token\u003e",
                        "description": "Refresh Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token refresh done successfully.",
                        "schema": {
                            "$ref": "#/definitions/response.Tokens"
                        }
                    },
                    "401": {
                        "description": "Either refresh token not found or token is expired.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    }
                }
            }
        },
        "/api/v1/tasks": {
            "get": {
                "description": "Get all tasks of user based on query parameters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get all tasks",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003caccess_token\u003e",
                        "description": "Access Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "return tasks created by you if createdByMe set to true otherwise false.",
                        "name": "createdByMe",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of tasks to return per page (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term to filter tasks",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter tasks by status (TO-DO, In-PROGRESS, COMPLETED, CLOSED)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Sort tasks by create time (true for ascending, false for descending)",
                        "name": "sortByFilter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tasks fetched successfully.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/response.Task"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "401": {
                        "description": "Either refresh token not found or token is expired.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    }
                }
            },
            "post": {
                "description": "CreateTask API is made for creating a new task in the task manager application.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Create New Task",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003caccess_token\u003e",
                        "description": "Access Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Title of the task (min length: 4, max length: 48)",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Description of the task (min length: 12, max length: 196)",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the individual assignee",
                        "name": "assigneeIndividual",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "ID of the team assignee",
                        "name": "assigneeTeam",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Status of the task (TO-DO, In-PROGRESS, COMPLETED, CLOSED)",
                        "name": "status",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Priority of the task (LOW, MEDIUM, HIGH, VERY HIGH)",
                        "name": "priority",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task created successfully.",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, either data is not valid or assignee privacy is Private.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "401": {
                        "description": "Either refresh token not found or token is expired.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    }
                }
            }
        },
        "/api/v1/tasks/": {
            "put": {
                "description": "Update a task based on provided parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Update a task",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "TaskID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003caccess_token\u003e",
                        "description": "Access Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Title of the task (min length: 4, max length: 48)",
                        "name": "title",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Description of the task (min length: 12, max length: 196)",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "ID of the individual assignee",
                        "name": "assigneeIndividual",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "ID of the team assignee",
                        "name": "assigneeTeam",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Status of the task (TO-DO, In-PROGRESS, COMPLETED, CLOSED)",
                        "name": "status",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Priority of the task (LOW, MEDIUM, HIGH, VERY HIGH)",
                        "name": "priority",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task updated successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "401": {
                        "description": "Either refresh token not found or token is expired.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "403": {
                        "description": "Not allowed to update task",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    }
                }
            }
        },
        "/api/v1/tasks/team/{TeamID}": {
            "get": {
                "description": "Get all tasks of a team based on query parameters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get all tasks of a team",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003caccess_token\u003e",
                        "description": "Access Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "TeamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of tasks to return per page (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term to filter tasks",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter tasks by status (TO-DO, In-PROGRESS, COMPLETED, CLOSED)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Sort tasks by create time (true for ascending, false for descending)",
                        "name": "sortByFilter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tasks fetched successfully.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/response.Task"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "401": {
                        "description": "Either refresh token not found or token is expired.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    }
                }
            }
        },
        "/api/v1/teams": {
            "get": {
                "description": "Get all teams of user based on query parameters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "Get all teams",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003caccess_token\u003e",
                        "description": "Access Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "return teams created by you if createdByMe set to true otherwise false.",
                        "name": "createdByMe",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of tasks to return per page (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term to filter tasks",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Sort tasks by create time (true for ascending, false for descending)",
                        "name": "sortByCreatedAt",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Teams fetched successfully.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/response.Team"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "401": {
                        "description": "Either refresh token not found or token is expired.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    }
                }
            },
            "post": {
                "description": "CreateTeam API is made for creating a new team in the task manager application.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "Create New Team",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003caccess_token\u003e",
                        "description": "Access Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "2024-03-25T22:59:59.000Z",
                        "name": "createdAt",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "example": 954751326021189799,
                        "name": "createdBy",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "example": 954751326021189633,
                        "name": "id",
                        "in": "formData"
                    },
                    {
                        "maxLength": 15,
                        "minLength": 3,
                        "type": "string",
                        "example": "Team Jupiter",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "enum": [
                            "PUBLIC",
                            "PRIVATE"
                        ],
                        "type": "string",
                        "example": "PUBLIC",
                        "name": "privacy",
                        "in": "formData"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "multi",
                        "description": "Ids of user who will be added to the team.",
                        "name": "members",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team created successfully.",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "401": {
                        "description": "Either refresh token not found or token is expired.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    }
                }
            }
        },
        "/api/v1/teams/leave/{TeamID}": {
            "delete": {
                "description": "Removes user from particular team",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "Leave Team",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003caccess_token\u003e",
                        "description": "Access Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of team whose members you want.",
                        "name": "TeamID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team left successfully.",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "you are not a member of that team.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "401": {
                        "description": "Either refresh token not found or token is expired.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    }
                }
            }
        },
        "/api/v1/teams/members": {
            "post": {
                "description": "Add members to a team based on provided parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "Add members to a team",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "TeamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003caccess_token\u003e",
                        "description": "Access Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "multi",
                        "description": "Array of member IDs to add to the team",
                        "name": "memberIds",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Members added successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "401": {
                        "description": "Either refresh token not found or token is expired.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "403": {
                        "description": "Not allowed to add members.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "409": {
                        "description": "Member already exist.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove members from a team based on provided parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "Remove members from a team",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "TeamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003caccess_token\u003e",
                        "description": "Access Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "multi",
                        "description": "Array of member IDs to add to the team",
                        "name": "memberIds",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Members Removed successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "401": {
                        "description": "Either refresh token not found or token is expired.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "403": {
                        "description": "Not allowed to remove members.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    }
                }
            }
        },
        "/api/v1/teams/{TeamID}/members": {
            "get": {
                "description": "Get all members of team based on query parameters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "summary": "Get all team members",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003caccess_token\u003e",
                        "description": "Access Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of team whose members you want.",
                        "name": "TeamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of tasks to return per page (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team members fetched successfully.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/response.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "401": {
                        "description": "Either refresh token not found or token is expired.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    }
                }
            }
        },
        "/api/v1/users/profile": {
            "get": {
                "description": "Get details of the authenticated user based on the authenticated user ID provided via token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get details of the authenticated user",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003caccess_token\u003e",
                        "description": "Access Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/response.User"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "401": {
                        "description": "Either refresh token not found or token is expired.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    }
                }
            },
            "put": {
                "description": "UpdateUserProfile API is made for updating a user's profile.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update User Profile",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003caccess_token\u003e",
                        "description": "Access Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "First name of the user",
                        "name": "firstName",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Last name of the user",
                        "name": "lastName",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Bio of the user",
                        "name": "bio",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Email of the user",
                        "name": "email",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Password of the user",
                        "name": "password",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Privacy of the user (PUBLIC, PRIVATE)",
                        "name": "privacy",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Updated successfully.",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "401": {
                        "description": "Either password not matched or token expired.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "404": {
                        "description": "No user found.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "409": {
                        "description": "Duplicate email found.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    }
                }
            }
        },
        "/api/v1/users/public-privacy": {
            "get": {
                "description": "Get all public privacy users based on query parameters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all public privacy users",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003caccess_token\u003e",
                        "description": "Access Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of users to return per page (default 10)",
                        "name": "Limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default 0)",
                        "name": "Offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term to filter users",
                        "name": "Search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Public privacy users fetched successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/response.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "401": {
                        "description": "Either refresh token not found or token is expired.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    }
                }
            }
        },
        "/api/v1/users/reset-password": {
            "put": {
                "description": "ResetUserPassword API is made for reset user password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "reset user password",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID which you've received in response of SendOTPToUser API",
                        "name": "id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New password of the user",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset done successfully.",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "401": {
                        "description": "OTP not verified with our system.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    }
                }
            }
        },
        "/api/v1/users/send-otp": {
            "post": {
                "description": "SendOTPToUser API is made for sending an otp to user's email address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Sends an OTP",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email of the user",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully.",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "404": {
                        "description": "No Email found.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    }
                }
            }
        },
        "/api/v1/users/verify-otp": {
            "post": {
                "description": "VerifyOTP API is made for verifying an otp from user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Verifies an OTP",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID which you've received in response of SendOTPToUser API",
                        "name": "id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "OTP which user has entered",
                        "name": "otp",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP Verifies successfully.",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "401": {
                        "description": "OTP not matched.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "410": {
                        "description": "OTP verification time expired.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/errorhandling.CustomError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errorhandling.CustomError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "Bad request"
                },
                "error": {
                    "type": "string",
                    "example": "Corresponding Error Message will Show Here"
                }
            }
        },
        "response.SuccessResponse": {
            "description": "Send success response to client with corresponding message and id(if any).",
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "200 OK"
                },
                "id": {
                    "type": "integer",
                    "example": 974751326021189896
                },
                "message": {
                    "type": "string",
                    "example": "Task Created Successfully."
                }
            }
        },
        "response.Task": {
            "description": "Task information with title, description, deadline, assignee, status, priority.",
            "type": "object",
            "properties": {
                "assigneeIndividual": {
                    "type": "integer",
                    "example": 974751326021189123
                },
                "assigneeTeam": {
                    "type": "integer",
                    "example": 974751326021189234
                },
                "createdAt": {
                    "type": "string",
                    "example": "2024-03-25T22:59:59.000Z"
                },
                "createdBy": {
                    "type": "integer",
                    "example": 974751326021189896
                },
                "deadline": {
                    "type": "string",
                    "example": "2024-03-25T22:59:59.000Z"
                },
                "description": {
                    "type": "string",
                    "example": "Create Task Manager Project with GoLang as Backend."
                },
                "id": {
                    "type": "integer",
                    "example": 974751326021189496
                },
                "priority": {
                    "type": "string",
                    "example": "High"
                },
                "status": {
                    "type": "string",
                    "example": "TO-DO"
                },
                "title": {
                    "type": "string",
                    "example": "GoLang project: Task Manager"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-03-26T12:49:539.000Z"
                },
                "updatedBy": {
                    "type": "integer",
                    "example": 974751326021189896
                }
            }
        },
        "response.Team": {
            "description": "Team information with it's id, name, privacy (PUBLIC or PRIVATE), id of user who created it, time when it was created and team members.",
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2024-03-25T22:59:59.000Z"
                },
                "createdBy": {
                    "type": "integer",
                    "example": 954751326021189799
                },
                "id": {
                    "type": "integer",
                    "example": 954751326021189633
                },
                "name": {
                    "type": "string",
                    "example": "Team Jupiter"
                },
                "teamPrivacy": {
                    "type": "string",
                    "example": "PUBLIC"
                }
            }
        },
        "response.Tokens": {
            "description": "Used to send access and refresh token to response.",
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                },
                "code": {
                    "type": "string",
                    "example": "200 OK"
                },
                "refreshToken": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                }
            }
        },
        "response.User": {
            "description": "User information with id, first name, last name, bio, email, password and privacy.",
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string",
                    "example": "Junior Software Engineer at ZURU TECH INDIA."
                },
                "email": {
                    "type": "string",
                    "example": "chiragmakwana@gmail.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "Chirag"
                },
                "id": {
                    "type": "integer",
                    "example": 974751326021189896
                },
                "lastName": {
                    "type": "string",
                    "example": "Makwana"
                },
                "password": {
                    "type": "string",
                    "example": "Chirag123$,omitempty"
                },
                "privacy": {
                    "type": "string",
                    "example": "PUBLIC"
                }
            }
        },
        "response.UserWithTokens": {
            "description": "Send user info along with access token and refresh token to response.",
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                },
                "code": {
                    "type": "string",
                    "example": "200 OK"
                },
                "refreshToken": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                },
                "user": {
                    "$ref": "#/definitions/response.User"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:9090",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Task Manager API Documentation",
	Description:      "This is the api documentation of task manager project.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
